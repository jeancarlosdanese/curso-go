package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"curso-go/go-graphql/graph/model"
	"fmt"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	rowsCourse, err := r.CourseDB.FindByCategoryID(obj.ID)
	if err != nil {
		return nil, err
	}

	var courses []*model.Course
	for _, rowCourse := range rowsCourse {
		courses = append(courses, &model.Course{
			ID:          rowCourse.ID,
			Name:        rowCourse.Name,
			Description: &rowCourse.Description,
		})
	}

	return courses, nil
}

// Category is the resolver for the category field.
func (r *courseResolver) Category(ctx context.Context, obj *model.Course) (*model.Category, error) {
	rowCourse, err := r.CategoryDB.FindByCourseID(obj.ID)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		ID:          rowCourse.ID,
		Name:        rowCourse.Name,
		Description: &rowCourse.Description,
	}, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, category model.NewCategory) (*model.Category, error) {
	categoryCreated, err := r.CategoryDB.Create(category.Name, *category.Description)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		ID:          categoryCreated.ID,
		Name:        categoryCreated.Name,
		Description: &categoryCreated.Description,
	}, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, category model.NewCategory) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, course model.NewCourse) (*model.Course, error) {
	courseCreated, err := r.CourseDB.Create(course.Name, *course.Description, course.CategoryID)
	if err != nil {
		return nil, err
	}
	return &model.Course{
		ID:          courseCreated.ID,
		Name:        courseCreated.Name,
		Description: &courseCreated.Description,
	}, nil
}

// UpdateCourse is the resolver for the updateCourse field.
func (r *mutationResolver) UpdateCourse(ctx context.Context, id string, course model.NewCourse) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: UpdateCourse - updateCourse"))
}

// DeleteCourse is the resolver for the deleteCourse field.
func (r *mutationResolver) DeleteCourse(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCourse - deleteCourse"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	result, err := r.CategoryDB.FindAll()
	if err != nil {
		return nil, err
	}

	var categories []*model.Category
	for _, category := range result {
		categories = append(categories, &model.Category{
			ID:          category.ID,
			Name:        category.Name,
			Description: &category.Description,
		})
	}
	return categories, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	result, err := r.CourseDB.FindAll()
	if err != nil {
		return nil, err
	}

	var courses []*model.Course
	for _, course := range result {
		courses = append(courses, &model.Course{
			ID:          course.ID,
			Name:        course.Name,
			Description: &course.Description,
		})
	}
	return courses, nil
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, id string) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: Course - course"))
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
